#include "mainwindow.h"


MyWindow::MyWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    time = 200;
    buffer_size = 20;
    plot = ui->kplotwidget;
    plot->setLimits(-(double)time*buffer_size/1000,
                               (double)time/1000,-200,200);
    
    plot->axis( KPlotWidget::BottomAxis )->setLabel( ("time in seconds") );
    plot->axis( KPlotWidget::LeftAxis )->setLabel( ("displacement in pixels") );
    ui->Start->setEnabled(false);
    ui->OpenFile->setEnabled(true);
    ui->Stop->setEnabled(false);
    ui->Pause->setEnabled(false);
    timer = new QTimer(this);
    connect(timer,SIGNAL(timeout()),this,SLOT(on_updateImageGraph()));
    roi_range.x = roi_range.y = 400;
    waveform = new KPlotObject(Qt::red, KPlotObject::Lines,2);
    plot->addPlotObject(waveform);
    plot->update();
    vectors = new ohe_framework::CircularBufferPoint(buffer_size);
    center_x = center_y = 0;
}

void MyWindow::on_OpenFile_clicked()
{
    QString filename = QFileDialog::getOpenFileName(this,
                                                    tr("Open File"),
                                                    "/home",tr("video (*.avi)"));
    if(!filename.isEmpty())
    {
        current_filename = filename.toStdString();
        ui->Start->setEnabled(true);
        ui->Stop->setEnabled(false);
    }
}

void MyWindow::on_Start_clicked()
{
    video_input.open(current_filename);
    if(video_input.isOpened())
    {
        image_size= cv::Size((int)video_input.get(CV_CAP_PROP_FRAME_WIDTH),
                       (int)video_input.get(CV_CAP_PROP_FRAME_HEIGHT));
        video_being_processed = true;
        ui->Start->setEnabled(false);
        ui->OpenFile->setEnabled(false);
        ui->Stop->setEnabled(true);
        ui->Pause->setEnabled(true);
        center_x = image_size.width/2;
        center_y = image_size.height/2;
        image_raw = cv::Mat::zeros(image_size,CV_8UC3);
        image_processed = cv::Mat::zeros(image_size,CV_8UC3);
        image_Qimage = cv::Mat::zeros(cv::Size(400,250),CV_8UC3);
        images.push_back(ohe_framework::ImageMatrixUchar());
        images.push_back(ohe_framework::ImageMatrixUchar());
        images.push_back(ohe_framework::ImageMatrixUchar());
        images[0].matToMatrix(image_raw);
        images[1].matToMatrix(image_raw);
        images[2].matToMatrix(image_raw);
        wire_found = false;
        roi_origin.y=roi_origin.x=0;
        roi_pre_origin = roi_origin;
        roi_range.x = images[0].getCols();
        roi_range.y = images[0].getRows();
        wire_points.push_back(ohe_framework::Point());
        wire_points.push_back(ohe_framework::Point());
        count = 0;
        ohe_framework::setTimeGap(1.0);
        timer->start(time);
    }
    else
    {
        QString name(current_filename.c_str());
        QMessageBox::question(  this,
                                tr("Error"),
                                tr("Cannot open file \"%1\"?").arg(name),
                                QMessageBox::Ok);
    } 
}

void MyWindow::on_Stop_clicked()
{
    video_being_processed = false;
    wire_found = false;
    video_input.release();
    ui->OpenFile->setEnabled(true);
    ui->Start->setEnabled(true);
    ui->Stop->setEnabled(false);
    ui->Pause->setEnabled(false);
    timer->stop();
    roi_origin.x = roi_origin.y = 0;
    roi_pre_origin.x = roi_pre_origin.y = 0;
    center_x = center_y = 0;
    count =0;
    wire_points.clear();
    vectors->clear();
    image_raw.release();
    image_processed.release();
    image_Qimage.release();
    images.clear();
}

void MyWindow::on_Pause_clicked()
{
    if(video_being_processed)
    {
        video_being_processed = false;
    }
    else
    {
        video_being_processed = true;
    }
}

void MyWindow::on_updateImageGraph()
{
    if(video_being_processed)
    {
        std:clock_t start_time;
        start_time = clock();
        if(video_input.read(image_raw))
        {
            images[0].matToMatrix(image_raw);
            image_processed = cv::Mat::zeros(image_size,CV_8UC3);
            images[1].matToMatrix(image_processed);
            images[2].matToMatrix(image_processed);
            roi_pre_origin = roi_origin;
            wire_found = ohe_framework::getNewPosition(images,roi_origin,
                                                       roi_range,wire_points);
            if(!wire_found)
            {
                roi_origin.y=roi_origin.x=0;
                roi_pre_origin = roi_origin;
                roi_range.x = images[0].getCols();
                roi_range.y = images[0].getRows();
                wire_found = ohe_framework::getNewPosition(images,roi_origin,
                                                           roi_range,wire_points);
            }
            displayImages();
            if(wire_found)
            {
/*                wire_points[0].x +=roi_pre_origin.x; 
//                wire_points[0].y +=roi_pre_origin.y;
//                wire_points[1].x +=roi_pre_origin.x; 
//                wire_points[1].y +=roi_pre_origin.y;*/
                roi_range.x = 300;
                roi_range.y = 300;
                vectors->write((wire_points.at(0)),(wire_points.at(1)));
                if(count<20)
                {
                    count++;
                }
                else
                    displayGraph();
            }
/*            else
//            {
//                wire_points[0].x =0; 
//                wire_points[0].y =0;
//                wire_points[1].x =0; 
//                wire_points[1].y =0;
//            }*/
        }
        else
            on_Stop_clicked();
        clock_t end_time = clock();
        std::cout<<"execution time = "<<(double)(end_time-start_time)/(double)CLOCKS_PER_SEC<<std::endl;
    }
}

void MyWindow::displayGraph()
{
    KPlotObject *object = (ui->kplotwidget->plotObjects())[0];
    int read_index = vectors->getWriteIndex();
    int i =0;
    object->clearPoints();
    ohe_framework::Point upper, lower;
    for( double t =0;i<buffer_size;i++,t -=(double)time/1000 ) 
    {
         vectors->read(read_index-i,upper,lower);
         int x =  (int)((upper.x+lower.x)/2)-center_x;
         object->addPoint(t,x);
    }
    ui->kplotwidget->update();
}

void MyWindow::displayImages()
{
    /////////////////////////////////////////////////////////////////
    cv::resize(image_raw,image_Qimage,cv::Size(400,275));
    cv::cvtColor(image_Qimage,image_Qimage,CV_BGRA2RGB);
    QImage display1((uchar *)image_Qimage.data,image_Qimage.cols,
                    image_Qimage.rows,QImage::Format_RGB888);
    ui->label->setPixmap(QPixmap::fromImage(display1));
    //////////////////////////////////////////////////////////////////
    images[1].matrixToMat(image_processed);
    cv::resize(image_processed,image_Qimage,cv::Size(400,275));
    cv::cvtColor(image_Qimage,image_Qimage,CV_BGRA2RGB);
    QImage display2((uchar *)image_Qimage.data,image_Qimage.cols,
                    image_Qimage.rows,QImage::Format_RGB888);
    ui->label_2->setPixmap(QPixmap::fromImage(display2));
    //////////////////////////////////////////////////////////////////
    images[2].matrixToMat(image_processed);
    cv::resize(image_processed,image_Qimage,cv::Size(400,275));
    cv::cvtColor(image_Qimage,image_Qimage,CV_BGRA2RGB);
    QImage display3((uchar *)image_Qimage.data,image_Qimage.cols,
                    image_Qimage.rows,QImage::Format_RGB888);
    ui->label_3->setPixmap(QPixmap::fromImage(display3));
    /////////////////////////////////////////////////////////////////////
}

MyWindow::~MyWindow()
{
    std::cout<<"delteing "<<std::endl;
}

void MyWindow::closeEvent(QCloseEvent *)
{
    std::cout<<"closing"<<std::endl;
    if(video_being_processed)
    {
        on_Stop_clicked();
    }
    else
    { 
    }
}
